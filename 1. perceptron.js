let w1 = Math.random() * 2 - 1; // инициализация весов, случайные значения от -1 до 1 
let w2 = Math.random() * 2 - 1; 

let x1 = 1; // задание входных данных x1 и x2 и ожидаемых выходных значений y 
let x2 = 0;
let y = 1;

function threshold(x) { // пороговая функция активации, возвращает 1, если аргумент больше 0, иначе - 0. 
    if (x > 0) {
        return 1;
    } else {
        return 0;
    }
}

let net = w1 * x1 + w2 * x2; // расчет выходного значения нейронной сети, сумматор, который представляет собой линейную комбинацию входных данных и весов 
let output = threshold(net); // значение output получается применением пороговой функции активации к сумматору 
let error = y - output; // расчет ошибки, как разности между ожидаемым выходом y и выходом нейронной сети 
let learning_rate = 0.7; // скорость обучения 

w1 += learning_rate * error * x1; // обновление весов по дельта-правилу, error * x1 - поправки к весам, пропорциональные ошибке 
w2 += learning_rate * error * x2; // error * x2 - поправки к весам, пропорциональные входным данным 

console.log("Входные данные:", x1, x2); // вывод результатов 
console.log("Ожидаемый выход:", y);
console.log("Выход нейронной сети:", output);
console.log("Ошибка:", error);
console.log("Новые веса:", w1, w2);
